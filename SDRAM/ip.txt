; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\SDRAM\ip.o --asm_dir=.\SDRAM\ --list_dir=.\SDRAM\ --depend=.\SDRAM\ip.d --cpu=ARM920T --apcs=interwork -O0 -I..\Common\Inc -I.\INC -I.\INC\tftp -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Samsung --omf_browse=.\SDRAM\ip.crf Source\tftp\ip.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ip_fast_csum PROC
;;;11     
;;;12     unsigned short ip_fast_csum(unsigned char * iph, unsigned int ihl)
000000  e52d4004          PUSH     {r4}
;;;13     {
000004  e1a0c000          MOV      r12,r0
000008  e1a02001          MOV      r2,r1
;;;14     	unsigned int sum, tmp1;
;;;15     	
;;;16     	// ip_fast_csum
;;;17     	__asm {						
;;;18     	ldr	sum, [iph], #4		
00000c  e49c1004          LDR      r1,[r12],#4
;;;19     	ldr	tmp1, [iph], #4
000010  e49c3004          LDR      r3,[r12],#4
;;;20     	sub	ihl, ihl, #5
000014  e2422005          SUB      r2,r2,#5
;;;21     	adds	sum, sum, tmp1
000018  e0911003          ADDS     r1,r1,r3
;;;22     	ldr	tmp1, [iph], #4
00001c  e49c3004          LDR      r3,[r12],#4
;;;23     	adcs	sum, sum, tmp1
000020  e0b11003          ADCS     r1,r1,r3
;;;24     	ldr	tmp1, [iph], #4
000024  e49c3004          LDR      r3,[r12],#4
;;;25     	adcs	sum, sum, tmp1
000028  e0b11003          ADCS     r1,r1,r3
;;;26     l:	ldr	tmp1, [iph], #4
00002c  e1a00000          MOV      r0,r0
                  |L1.48|
000030  e49c3004          LDR      r3,[r12],#4
;;;27     	adcs	sum, sum, tmp1
000034  e0b11003          ADCS     r1,r1,r3
;;;28     	tst	ihl, #15
000038  e312000f          TST      r2,#0xf
00003c  0a000000          BEQ      |L1.68|
;;;29     	subne	ihl, ihl, #1
000040  e2422001          SUB      r2,r2,#1
                  |L1.68|
000044  0a000000          BEQ      |L1.76|
;;;30     	bne	l
000048  eafffff8          B        |L1.48|
                  |L1.76|
;;;31     	adc	sum, sum, #0
00004c  e2a11000          ADC      r1,r1,#0
;;;32     	adds	sum, sum, sum, lsl #16
000050  e0911801          ADDS     r1,r1,r1,LSL #16
000054  3a000000          BCC      |L1.92|
;;;33     	addcs	sum, sum, #0x10000
000058  e2811801          ADD      r1,r1,#0x10000
                  |L1.92|
;;;34     	mvn	sum, sum
00005c  e1e01001          MVN      r1,r1
;;;35     	mov	sum, sum, lsr #16	
000060  e1a01821          LSR      r1,r1,#16
;;;36     	};
;;;37     	
;;;38     	return sum;
000064  e1a00801          LSL      r0,r1,#16
000068  e1a00820          LSR      r0,r0,#16
00006c  e49d4004          POP      {r4}
;;;39     } 
000070  e12fff1e          BX       lr
;;;40     
                          ENDP

                  ip_init PROC
;;;41     int ip_init(unsigned long ip)
000074  e1a01000          MOV      r1,r0
;;;42     {
;;;43     	local_ip = ip;
000078  e59f020c          LDR      r0,|L1.652|
00007c  e5801000          STR      r1,[r0,#0]  ; local_ip
;;;44     	return 0;
000080  e3a00000          MOV      r0,#0
;;;45     }
000084  e12fff1e          BX       lr
;;;46     
                          ENDP

                  ip_rcv_packet PROC
;;;47     int ip_rcv_packet(struct sk_buff *skb)
000088  e92d4070          PUSH     {r4-r6,lr}
;;;48     {
00008c  e1a05000          MOV      r5,r0
;;;49     	struct iphdr *ip_hdr = (struct iphdr *)(skb->data);
000090  e59545f0          LDR      r4,[r5,#0x5f0]
;;;50     
;;;51     	if (ntohl(ip_hdr->daddr) == local_ip)
000094  e2840010          ADD      r0,r4,#0x10
000098  ebfffffe          BL       __aeabi_uread4
00009c  e1a06000          MOV      r6,r0
0000a0  ebfffffe          BL       ntohl
0000a4  e59f11e0          LDR      r1,|L1.652|
0000a8  e5911000          LDR      r1,[r1,#0]  ; local_ip
0000ac  e1500001          CMP      r0,r1
0000b0  1a000011          BNE      |L1.252|
;;;52     	{
;;;53     		skb->len = ntohs(ip_hdr->tot_len);
0000b4  e5d41003          LDRB     r1,[r4,#3]
0000b8  e5d42002          LDRB     r2,[r4,#2]
0000bc  e1820401          ORR      r0,r2,r1,LSL #8
0000c0  ebfffffe          BL       ntohs
0000c4  e58505f4          STR      r0,[r5,#0x5f4]
;;;54     		skb_pull(skb, sizeof(struct iphdr));
0000c8  e3a01014          MOV      r1,#0x14
0000cc  e1a00005          MOV      r0,r5
0000d0  ebfffffe          BL       skb_pull
;;;55     
;;;56     		if (ip_hdr->protocol == UDP)
0000d4  e5d40009          LDRB     r0,[r4,#9]
0000d8  e3500011          CMP      r0,#0x11
0000dc  1a000001          BNE      |L1.232|
;;;57     		{	
;;;58     			udp_rcv_packet(skb);
0000e0  e1a00005          MOV      r0,r5
0000e4  ebfffffe          BL       udp_rcv_packet
                  |L1.232|
;;;59     		}
;;;60     
;;;61     		if(ip_hdr->protocol == ICMP)
0000e8  e5d40009          LDRB     r0,[r4,#9]
0000ec  e3500001          CMP      r0,#1
0000f0  1a000001          BNE      |L1.252|
;;;62     		{
;;;63     			icmp_rcv_packet(skb);
0000f4  e1a00005          MOV      r0,r5
0000f8  ebfffffe          BL       icmp_rcv_packet
                  |L1.252|
;;;64     		}			
;;;65     	}
;;;66     
;;;67     	return 0;
0000fc  e3a00000          MOV      r0,#0
000100  e8bd4070          POP      {r4-r6,lr}
;;;68     }
000104  e12fff1e          BX       lr
;;;69     
                          ENDP

                  ip_send PROC
;;;70     int ip_send(struct sk_buff *skb, unsigned long ip, unsigned char proto)
000108  e92d41fc          PUSH     {r2-r8,lr}
;;;71     {
00010c  e1a05000          MOV      r5,r0
000110  e1a06001          MOV      r6,r1
000114  e1a07002          MOV      r7,r2
;;;72     	struct iphdr *ip_hdr;
;;;73     	static unsigned short ip_id = 32;	
;;;74     	unsigned char dest_eth_addr[ETH_ALEN];	
;;;75     
;;;76     	if (arp_get_eth_addr(ip, dest_eth_addr))
000118  e1a0100d          MOV      r1,sp
00011c  e1a00006          MOV      r0,r6
000120  ebfffffe          BL       arp_get_eth_addr
000124  e3500000          CMP      r0,#0
000128  0a000002          BEQ      |L1.312|
;;;77     		return -1;
00012c  e3e00000          MVN      r0,#0
                  |L1.304|
000130  e8bd41fc          POP      {r2-r8,lr}
;;;78     
;;;79     	ip_hdr = (struct iphdr *)skb_push(skb, sizeof(struct iphdr));
;;;80     
;;;81     	ip_hdr->ihl = 5;
;;;82     	ip_hdr->version = 4;
;;;83     	ip_hdr->tos = 0;
;;;84     //	ip_hdr->tot_len = htons(32);
;;;85     		ip_hdr->tot_len = htons(skb->len);	
;;;86     	ip_hdr->id = htons(ip_id++);
;;;87     	ip_hdr->frag_off = 0;
;;;88     	ip_hdr->ttl = 20;
;;;89     	ip_hdr->protocol = proto;
;;;90     	ip_hdr->check = 0;
;;;91     	ip_hdr->saddr = htonl(local_ip);
;;;92     	ip_hdr->daddr = htonl(ip);	
;;;93     	ip_hdr->check = ip_fast_csum((unsigned char *)ip_hdr,ip_hdr->ihl);
;;;94     
;;;95     	eth_send(skb, dest_eth_addr, ETH_P_IP);
;;;96     
;;;97     	return 0;
;;;98     }
000134  e12fff1e          BX       lr
                  |L1.312|
000138  e3a01014          MOV      r1,#0x14              ;79
00013c  e1a00005          MOV      r0,r5                 ;79
000140  ebfffffe          BL       skb_push
000144  e1a04000          MOV      r4,r0                 ;79
000148  e5d40000          LDRB     r0,[r4,#0]            ;81
00014c  e3c0000f          BIC      r0,r0,#0xf            ;81
000150  e3800005          ORR      r0,r0,#5              ;81
000154  e5c40000          STRB     r0,[r4,#0]            ;81
000158  e5d40000          LDRB     r0,[r4,#0]            ;82
00015c  e3c000f0          BIC      r0,r0,#0xf0           ;82
000160  e3800040          ORR      r0,r0,#0x40           ;82
000164  e5c40000          STRB     r0,[r4,#0]            ;82
000168  e3a00000          MOV      r0,#0                 ;83
00016c  e5c40001          STRB     r0,[r4,#1]            ;83
000170  e59f1118          LDR      r1,|L1.656|
000174  e19110b5          LDRH     r1,[r1,r5]            ;85
000178  e1a00801          LSL      r0,r1,#16             ;85
00017c  e1a00820          LSR      r0,r0,#16             ;85
000180  ebfffffe          BL       htons
000184  e5c40002          STRB     r0,[r4,#2]            ;85
000188  e1a00420          LSR      r0,r0,#8              ;85
00018c  e5c40003          STRB     r0,[r4,#3]            ;85
000190  e59f10fc          LDR      r1,|L1.660|
000194  e1d100b0          LDRH     r0,[r1,#0]            ;86  ; ip_id
000198  e2812000          ADD      r2,r1,#0              ;86
00019c  e1d220b0          LDRH     r2,[r2,#0]            ;86  ; ip_id
0001a0  e2822001          ADD      r2,r2,#1              ;86
0001a4  e3c22801          BIC      r2,r2,#0x10000        ;86
0001a8  e2813000          ADD      r3,r1,#0              ;86
0001ac  e1c320b0          STRH     r2,[r3,#0]            ;86  ; ip_id
0001b0  ebfffffe          BL       htons
0001b4  e5c40004          STRB     r0,[r4,#4]            ;86
0001b8  e1a00420          LSR      r0,r0,#8              ;86
0001bc  e5c40005          STRB     r0,[r4,#5]            ;86
0001c0  e3a00000          MOV      r0,#0                 ;87
0001c4  e5c40006          STRB     r0,[r4,#6]            ;87
0001c8  e5c40007          STRB     r0,[r4,#7]            ;87
0001cc  e3a00014          MOV      r0,#0x14              ;88
0001d0  e5c40008          STRB     r0,[r4,#8]            ;88
0001d4  e5c47009          STRB     r7,[r4,#9]            ;89
0001d8  e3a00000          MOV      r0,#0                 ;90
0001dc  e5c4000a          STRB     r0,[r4,#0xa]          ;90
0001e0  e5c4000b          STRB     r0,[r4,#0xb]          ;90
0001e4  e59f00a0          LDR      r0,|L1.652|
0001e8  e5900000          LDR      r0,[r0,#0]            ;91  ; local_ip
0001ec  ebfffffe          BL       htonl
0001f0  e1a08000          MOV      r8,r0                 ;91
0001f4  e284100c          ADD      r1,r4,#0xc            ;91
0001f8  ebfffffe          BL       __aeabi_uwrite4
0001fc  e1a00006          MOV      r0,r6                 ;92
000200  ebfffffe          BL       htonl
000204  e1a08000          MOV      r8,r0                 ;92
000208  e2841010          ADD      r1,r4,#0x10           ;92
00020c  ebfffffe          BL       __aeabi_uwrite4
000210  e5d40000          LDRB     r0,[r4,#0]            ;93
000214  e200100f          AND      r1,r0,#0xf            ;93
000218  e1a00004          MOV      r0,r4                 ;93
00021c  ebfffffe          BL       ip_fast_csum
000220  e5c4000a          STRB     r0,[r4,#0xa]          ;93
000224  e1a00420          LSR      r0,r0,#8              ;93
000228  e5c4000b          STRB     r0,[r4,#0xb]          ;93
00022c  e3a02b02          MOV      r2,#0x800             ;95
000230  e1a0100d          MOV      r1,sp                 ;95
000234  e1a00005          MOV      r0,r5                 ;95
000238  ebfffffe          BL       eth_send
00023c  e3a00000          MOV      r0,#0                 ;97
000240  eaffffba          B        |L1.304|
;;;99     
                          ENDP

                  ip_skb_reserve PROC
;;;100    void ip_skb_reserve(struct sk_buff *skb)
000244  e92d4010          PUSH     {r4,lr}
;;;101    {
000248  e1a04000          MOV      r4,r0
;;;102    	eth_skb_reserve(skb);
00024c  e1a00004          MOV      r0,r4
000250  ebfffffe          BL       eth_skb_reserve
;;;103    	skb_reserve(skb, sizeof(struct iphdr));
000254  e3a01014          MOV      r1,#0x14
000258  e1a00004          MOV      r0,r4
00025c  ebfffffe          BL       skb_reserve
;;;104    }
000260  e8bd4010          POP      {r4,lr}
000264  e12fff1e          BX       lr
;;;105    
                          ENDP

                  ip_get_source_ip PROC
;;;106    unsigned long ip_get_source_ip(struct sk_buff *skb)
000268  e92d4070          PUSH     {r4-r6,lr}
;;;107    {
00026c  e1a04000          MOV      r4,r0
;;;108    	struct iphdr *ip_hdr;
;;;109    	
;;;110    	ip_hdr = (struct iphdr *)(skb->buf + ETH_HLEN);
000270  e2845010          ADD      r5,r4,#0x10
;;;111    	return ntohl(ip_hdr->saddr);
000274  e285000c          ADD      r0,r5,#0xc
000278  ebfffffe          BL       __aeabi_uread4
00027c  e1a06000          MOV      r6,r0
000280  ebfffffe          BL       ntohl
000284  e8bd4070          POP      {r4-r6,lr}
;;;112    }
000288  e12fff1e          BX       lr
;;;113    
                          ENDP

                  |L1.652|
                          DCD      local_ip
                  |L1.656|
                          DCD      0x000005f4
                  |L1.660|
                          DCD      ip_id

                          AREA ||.data||, DATA, ALIGN=2

                  local_ip
                          DCD      0x00000000
                  ip_id
000004  0020              DCW      0x0020
