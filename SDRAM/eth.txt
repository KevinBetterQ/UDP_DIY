; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\SDRAM\eth.o --asm_dir=.\SDRAM\ --list_dir=.\SDRAM\ --depend=.\SDRAM\eth.d --cpu=ARM920T --apcs=interwork -O0 -I..\Common\Inc -I.\INC -I.\INC\tftp -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Samsung --omf_browse=.\SDRAM\eth.crf Source\tftp\eth.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  eth_init PROC
;;;6      
;;;7      int eth_init(void) 
000000  e92d4010          PUSH     {r4,lr}
;;;8      {
;;;9      	return DM9000DBG_Init();
000004  ebfffffe          BL       DM9000DBG_Init
000008  e8bd4010          POP      {r4,lr}
;;;10     }
00000c  e12fff1e          BX       lr
;;;11     
                          ENDP

                  eth_get_addr PROC
;;;31     
;;;32     int eth_get_addr(unsigned char *addr)
000010  e92d4010          PUSH     {r4,lr}
;;;33     {
000014  e1a04000          MOV      r4,r0
;;;34     	return board_eth_get_addr(addr);
000018  e1a00004          MOV      r0,r4
00001c  ebfffffe          BL       board_eth_get_addr
000020  e8bd4010          POP      {r4,lr}
;;;35     }
000024  e12fff1e          BX       lr
;;;36     
                          ENDP

                  eth_send PROC
;;;12     
;;;13     int eth_send(struct sk_buff *skb, unsigned char *dest_addr, unsigned short proto)
000028  e92d41fc          PUSH     {r2-r8,lr}
;;;14     {
00002c  e1a04000          MOV      r4,r0
000030  e1a07001          MOV      r7,r1
000034  e1a06002          MOV      r6,r2
;;;15     	struct ethhdr *eth_hdr;
;;;16     	unsigned char local_eth_addr[ETH_ALEN];
;;;17     	eth_get_addr(local_eth_addr);
000038  e1a0000d          MOV      r0,sp
00003c  ebfffffe          BL       eth_get_addr
;;;18     
;;;19     	eth_hdr = (struct ethhdr *)skb_push(skb, ETH_HLEN);
000040  e3a0100e          MOV      r1,#0xe
000044  e1a00004          MOV      r0,r4
000048  ebfffffe          BL       skb_push
00004c  e1a05000          MOV      r5,r0
;;;20     
;;;21     	memcpy((unsigned char *)eth_hdr->h_dest, dest_addr, ETH_ALEN);
000050  e3a02006          MOV      r2,#6
000054  e1a01007          MOV      r1,r7
000058  e1a00005          MOV      r0,r5
00005c  ebfffffe          BL       memcpy
;;;22     	memcpy((unsigned char *)eth_hdr->h_source, local_eth_addr, ETH_ALEN);
000060  e3a02006          MOV      r2,#6
000064  e1a0100d          MOV      r1,sp
000068  e2850006          ADD      r0,r5,#6
00006c  ebfffffe          BL       memcpy
;;;23     	eth_hdr->h_proto = htons(proto);
000070  e1a00006          MOV      r0,r6
000074  ebfffffe          BL       htons
000078  e5c5000c          STRB     r0,[r5,#0xc]
00007c  e1a00420          LSR      r0,r0,#8
000080  e5c5000d          STRB     r0,[r5,#0xd]
;;;24     	return dm9000_send(skb->data, skb->len);
000084  e59405f0          LDR      r0,[r4,#0x5f0]
000088  e59415f4          LDR      r1,[r4,#0x5f4]
00008c  ebfffffe          BL       dm9000_send
000090  e8bd41fc          POP      {r2-r8,lr}
;;;25     }
000094  e12fff1e          BX       lr
;;;26     
                          ENDP

                  eth_rcv PROC
;;;27     int eth_rcv(struct sk_buff *skb)
000098  e92d4010          PUSH     {r4,lr}
;;;28     {
00009c  e1a04000          MOV      r4,r0
;;;29     	return DM9000DBG_GetFrame(skb->data, &skb->len);
0000a0  e59405f0          LDR      r0,[r4,#0x5f0]
0000a4  e2841b01          ADD      r1,r4,#0x400
0000a8  e2811f7d          ADD      r1,r1,#0x1f4
0000ac  ebfffffe          BL       DM9000DBG_GetFrame
0000b0  e8bd4010          POP      {r4,lr}
;;;30     }
0000b4  e12fff1e          BX       lr
;;;31     
                          ENDP

                  eth_skb_reserve PROC
;;;36     
;;;37     void eth_skb_reserve(struct sk_buff *skb)
0000b8  e92d4010          PUSH     {r4,lr}
;;;38     {
0000bc  e1a04000          MOV      r4,r0
;;;39     	skb_reserve(skb, ETH_HLEN);
0000c0  e3a0100e          MOV      r1,#0xe
0000c4  e1a00004          MOV      r0,r4
0000c8  ebfffffe          BL       skb_reserve
;;;40     }
0000cc  e8bd4010          POP      {r4,lr}
0000d0  e12fff1e          BX       lr
;;;41     
                          ENDP

