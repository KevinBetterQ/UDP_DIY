L 1 "Source\tftp\udp.c"
N
N#include "skbuff.h"
L 1 ".\INC\tftp\skbuff.h" 1
N#ifndef __SKBUFF_H
N#define __SKBUFF_H
N
N#include "eth.h"
L 1 ".\INC\tftp\eth.h" 1
N#ifndef __ETH_H
N#define __ETH_H
N
N/*
N *	IEEE 802.3 Ethernet magic constants.  The frame sizes omit the preamble
N *	and FCS/CRC (frame check sequence). 
N */
N
N#define ETH_ALEN	6		/* Octets in one ethernet addr	 */
N#define ETH_HLEN	14		/* Total octets in header.	 */
N#define ETH_ZLEN	60		/* Min. octets in frame sans FCS */
N#define ETH_DATA_LEN	1500		/* Max. octets in payload	 */
N#define ETH_FRAME_LEN	1514		/* Max. octets in frame sans FCS */
N
N/*
N *	These are the defined Ethernet Protocol ID's.
N */
N
N#define ETH_P_LOOP	0x0060		/* Ethernet Loopback packet	*/
N#define ETH_P_ECHO	0x0200		/* Ethernet Echo packet		*/
N#define ETH_P_PUP	0x0400		/* Xerox PUP packet		*/
N#define ETH_P_IP	0x0800		/* Internet Protocol packet	*/
N#define ETH_P_X25	0x0805		/* CCITT X.25			*/
N#define ETH_P_ARP	0x0806		/* Address Resolution packet	*/
N#define	ETH_P_BPQ	0x08FF		/* G8BPQ AX.25 Ethernet Packet	[ NOT AN OFFICIALLY REGISTERED ID ] */
N#define ETH_P_DEC       0x6000          /* DEC Assigned proto           */
N#define ETH_P_DNA_DL    0x6001          /* DEC DNA Dump/Load            */
N#define ETH_P_DNA_RC    0x6002          /* DEC DNA Remote Console       */
N#define ETH_P_DNA_RT    0x6003          /* DEC DNA Routing              */
N#define ETH_P_LAT       0x6004          /* DEC LAT                      */
N#define ETH_P_DIAG      0x6005          /* DEC Diagnostics              */
N#define ETH_P_CUST      0x6006          /* DEC Customer use             */
N#define ETH_P_SCA       0x6007          /* DEC Systems Comms Arch       */
N#define ETH_P_RARP      0x8035		/* Reverse Addr Res packet	*/
N#define ETH_P_ATALK	0x809B		/* Appletalk DDP		*/
N#define ETH_P_AARP	0x80F3		/* Appletalk AARP		*/
N#define ETH_P_IPX	0x8137		/* IPX over DIX			*/
N#define ETH_P_IPV6	0x86DD		/* IPv6 over bluebook		*/
N
N
N/*
N *	This is an Ethernet frame header.
N */
N 
N__packed struct ethhdr
N{
N	unsigned char	h_dest[ETH_ALEN];	/* destination eth addr	*/
X	unsigned char	h_dest[6];	 
N	unsigned char	h_source[ETH_ALEN];	/* source ether addr	*/
X	unsigned char	h_source[6];	 
N	unsigned short	h_proto;		/* packet type ID field	*/
N};
N
Nstruct sk_buff;
N
Nint eth_init(void);
Nint eth_lnk_stat(void);
Nint eth_send(struct sk_buff *skb, unsigned char *dest_addr, unsigned short proto);
Nint eth_rcv(struct sk_buff *skb);
Nint eth_get_addr(unsigned char *addr);
Nvoid eth_skb_reserve(struct sk_buff *skb);
N
N
N#endif /* __ETH_H */
L 5 ".\INC\tftp\skbuff.h" 2
N
Nstruct sk_buff {
N
N	unsigned char pad[2];
N	unsigned char buf[ETH_FRAME_LEN];
X	unsigned char buf[1514];
N	unsigned int truesize;			/* Buffer size 					*/
N
N	unsigned char *data;			/* Data head pointer				*/
N	unsigned int len;			/* Length of actual data			*/
N};
N
Nint skb_init(void);
Nstruct sk_buff *alloc_skb(unsigned int size);
Nvoid free_skb(struct sk_buff *skb);
Nunsigned char *skb_put(struct sk_buff *skb, unsigned int len);
Nunsigned char *skb_push(struct sk_buff *skb, unsigned int len);
Nunsigned char *skb_pull(struct sk_buff *skb, unsigned int len);
Nvoid skb_reserve(struct sk_buff *skb, unsigned int len);
N
N#endif	/* __SKBUFF_H */
L 3 "Source\tftp\udp.c" 2
N#include "eth.h"
N#include "ip.h"
L 1 ".\INC\tftp\ip.h" 1
N#ifndef __IP_H
N#define __IP_H
N
N#define UDP		0x11
N#define	ICMP	0x01
N
N
N/*
N *	This structure defines an ip header.
N */
N
N__packed struct iphdr {
N
N	unsigned ihl:4,
N			 version:4;
N	unsigned char	tos;
N	unsigned short	tot_len;
N	unsigned short	id;
N	unsigned short	frag_off;
N	unsigned char	ttl;
N	unsigned char	protocol;
N	unsigned short	check;
N	unsigned long	saddr;
N	unsigned long	daddr;
N	/*The options start here. */
N};//__attribute__ ((packed));
N
Nint ip_init(unsigned long ip);
Nint ip_rcv_packet(struct sk_buff *skb);
Nint ip_send(struct sk_buff *skb, unsigned long ip, unsigned char proto);
Nvoid ip_skb_reserve(struct sk_buff *skb);
Nunsigned long ip_get_source_ip(struct sk_buff *skb);
N
N#endif /* __IP_H */
L 5 "Source\tftp\udp.c" 2
N#include "udp.h"
L 1 ".\INC\tftp\udp.h" 1
N#ifndef __UDP_H
N#define __UDP_H
N
N#define TFTP 0x45
N
N/*
N *	This structure defines an udp header.
N */
N
N__packed struct udphdr {
N	unsigned short	source;
N	unsigned short	dest;
N	unsigned short	len;
N	unsigned short	check;
N};//__attribute__ ((packed));
N
Nint udp_init(void);
Nint udp_rcv_packet(struct sk_buff *skb);
Nint udp_send(struct sk_buff *skb, unsigned long ip,
N	unsigned short source, unsigned short dest);
Nvoid udp_skb_reserve(struct sk_buff *skb);
Nunsigned short udp_get_source_port(struct sk_buff *skb);
N
N#endif /* __UDP_H */
L 6 "Source\tftp\udp.c" 2
N#include "tftp.h"
L 1 ".\INC\tftp\tftp.h" 1
N#ifndef __TFTP_H
N#define	__TFTP_H
N
N/*
N * Trivial File Transfer Protocol (IEN-133)
N */
N#define	SEGSIZE		512		/* data segment size */
N
N/*
N * Packet types.
N */
N#define	RRQ	01				/* read request */
N#define	WRQ	02				/* write request */
N#define	DATA	03				/* data packet */
N#define	ACK	04				/* acknowledgement */
N#define	ERROR	05				/* error code */
N
N__packed struct	tftphdr {
N	short	th_opcode;			/* packet type */
N	__packed union {
N		unsigned short	tu_block;	/* block # */
N		short	tu_code;		/* error code */
N		char	tu_stuff[1];		/* request packet stuff */
N	} th_u;
N	//char	th_data[0];			/* data or error string */
N	//char th_data[1];
N};
N
N#define	th_block	th_u.tu_block
N#define	th_code		th_u.tu_code
N#define	th_stuff	th_u.tu_stuff
N#define	th_msg		th_data
N
N/*
N * Error codes.
N */
N#define	EUNDEF		0		/* not defined */
N#define	ENOTFOUND	1		/* file not found */
N#define	EACCESS		2		/* access violation */
N#define	ENOSPACE	3		/* disk full or allocation exceeded */
N#define	EBADOP		4		/* illegal TFTP operation */
N#define	EBADID		5		/* unknown transfer ID */
N#define	EEXISTS		6		/* file already exists */
N#define	ENOUSER		7		/* no such user */
N
Nint tftp_rcv_packet(struct sk_buff *skb);
N
N#endif /* __TFTP_H */
L 7 "Source\tftp\udp.c" 2
N#include "utils.h"
L 1 ".\INC\utils.h" 1
N#ifndef	__UTILS_H
N#define	__UTILS_H
N
Nvoid memcpy(void *s1, const void *s2, int n);
Nvoid memset(void *s, const char ch, int n);
Nunsigned short ntohs(unsigned short s);
Nunsigned long ntohl(unsigned long l);
Nunsigned short htons(unsigned short s);
Nunsigned long htonl(unsigned long l);
N//unsigned long strtoul(char *s);
Nvoid ultostr(char *s, unsigned long data);
Nunsigned long strtobcd(char *s);
Nunsigned long strtodec(char *str, int cnt);
Nint strlen(const char *s);
Nint strncmp(const char *s1, const char *s2, int maxlen);
N
Nint getyorn(void);
Nvoid printf(char *f, ...);
Nvoid sprintf(char *mem, char *fmt, ...);
N
Nint GetParameter(char *str, int cnt);
N
N#endif
L 8 "Source\tftp\udp.c" 2
N
N
N
Nint udp_init(void)
N{
N	return 0;
N}
N
Nint udp_rcv_packet(struct sk_buff *skb)
N{
N	struct udphdr *udp_hdr = (struct udphdr *)(skb->data);
N
N	skb->len = ntohs(udp_hdr->len);
N	skb_pull(skb, sizeof(struct udphdr));
N
N	if (ntohs(udp_hdr->dest) == TFTP)
X	if (ntohs(udp_hdr->dest) == 0x45)
N	{
N		tftp_rcv_packet(skb);
N	}
N
N	return 0;
N}
N
Nint udp_send(struct sk_buff *skb, unsigned long ip,
N	unsigned short source, unsigned short dest)
N{
N	struct udphdr *udp_hdr;
N
N	udp_hdr = (struct udphdr *)skb_push(skb, sizeof(struct udphdr));
N	udp_hdr->source = htons(source);
N	udp_hdr->dest = htons(dest);
N	udp_hdr->len = htons(30);
N	udp_hdr->check = 0;
N
N	ip_send(skb, ip, UDP);
X	ip_send(skb, ip, 0x11);
N
N	return 0;
N}
N
Nvoid udp_skb_reserve(struct sk_buff *skb)
N{
N	ip_skb_reserve(skb);
N	skb_reserve(skb, sizeof(struct udphdr));
N}
N
Nunsigned short udp_get_source_port(struct sk_buff *skb)
N{
N	struct udphdr *udp_hdr;
N	
N	udp_hdr = (struct udphdr *)(skb->buf + ETH_HLEN + sizeof(struct iphdr));
X	udp_hdr = (struct udphdr *)(skb->buf + 14 + sizeof(struct iphdr));
N	return ntohs(udp_hdr->source);
N}
N
N
