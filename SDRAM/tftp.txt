; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\SDRAM\tftp.o --asm_dir=.\SDRAM\ --list_dir=.\SDRAM\ --depend=.\SDRAM\tftp.d --cpu=ARM920T --apcs=interwork -O0 -I..\Common\Inc -I.\INC -I.\INC\tftp -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Samsung --omf_browse=.\SDRAM\tftp.crf Source\tftp\tftp.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  tftp_send_ack PROC
;;;16     
;;;17     int tftp_send_ack(struct tftphdr *tftp_hdr, int block)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;18     {
000004  e1a07000          MOV      r7,r0
000008  e1a04001          MOV      r4,r1
;;;19     	struct tftphdr *tftp_ack;
;;;20     	struct sk_buff *skb;
;;;21     
;;;22     	skb = alloc_skb(ETH_FRAME_LEN);
00000c  e59f028c          LDR      r0,|L1.672|
000010  ebfffffe          BL       alloc_skb
000014  e1a06000          MOV      r6,r0
;;;23     	udp_skb_reserve(skb);
000018  e1a00006          MOV      r0,r6
00001c  ebfffffe          BL       udp_skb_reserve
;;;24     	tftp_ack = (struct tftphdr *)skb_put(skb, sizeof(struct tftphdr));
000020  e3a01004          MOV      r1,#4
000024  e1a00006          MOV      r0,r6
000028  ebfffffe          BL       skb_put
00002c  e1a05000          MOV      r5,r0
;;;25     	tftp_ack->th_opcode = htons(ACK);
000030  e3a00004          MOV      r0,#4
000034  ebfffffe          BL       htons
000038  e1a00800          LSL      r0,r0,#16
00003c  e1a00840          ASR      r0,r0,#16
000040  e5c50000          STRB     r0,[r5,#0]
000044  e1a00420          LSR      r0,r0,#8
000048  e5c50001          STRB     r0,[r5,#1]
;;;26     	tftp_ack->th_block = htons(block);
00004c  e1a00804          LSL      r0,r4,#16
000050  e1a00820          LSR      r0,r0,#16
000054  ebfffffe          BL       htons
000058  e5c50002          STRB     r0,[r5,#2]
00005c  e1a00420          LSR      r0,r0,#8
000060  e5c50003          STRB     r0,[r5,#3]
;;;27     	
;;;28     
;;;29     	udp_send(skb, client_ip, TFTP, client_port);
000064  e59f0238          LDR      r0,|L1.676|
000068  e1d030b0          LDRH     r3,[r0,#0]  ; client_port
00006c  e3a02045          MOV      r2,#0x45
000070  e59f0230          LDR      r0,|L1.680|
000074  e5901000          LDR      r1,[r0,#0]  ; client_ip
000078  e1a00006          MOV      r0,r6
00007c  ebfffffe          BL       udp_send
;;;30     
;;;31     	return 0;
000080  e3a00000          MOV      r0,#0
000084  e8bd41f0          POP      {r4-r8,lr}
;;;32     }
000088  e12fff1e          BX       lr
;;;33     
                          ENDP

                  tftp_rcv_wrq PROC
;;;34     int tftp_rcv_wrq(struct sk_buff *skb)
00008c  e92d4070          PUSH     {r4-r6,lr}
;;;35     {
000090  e1a04000          MOV      r4,r0
;;;36     	struct tftphdr *tftp_hdr;
;;;37     
;;;38     	client_ip = ip_get_source_ip(skb);
000094  e1a00004          MOV      r0,r4
000098  ebfffffe          BL       ip_get_source_ip
00009c  e59f1204          LDR      r1,|L1.680|
0000a0  e5810000          STR      r0,[r1,#0]  ; client_ip
;;;39     	client_port = udp_get_source_port(skb);
0000a4  e1a00004          MOV      r0,r4
0000a8  ebfffffe          BL       udp_get_source_port
0000ac  e59f11f0          LDR      r1,|L1.676|
0000b0  e1c100b0          STRH     r0,[r1,#0]  ; client_port
;;;40     
;;;41     	tftp_hdr = (struct tftphdr *)skb->data;
0000b4  e59455f0          LDR      r5,[r4,#0x5f0]
;;;42     	tftp_send_ack(tftp_hdr, 0);
0000b8  e3a01000          MOV      r1,#0
0000bc  e1a00005          MOV      r0,r5
0000c0  ebfffffe          BL       tftp_send_ack
;;;43     	client_block = 1;
0000c4  e3a00001          MOV      r0,#1
0000c8  e59f11dc          LDR      r1,|L1.684|
0000cc  e1c100b0          STRH     r0,[r1,#0]  ; client_block
;;;44     
;;;45     	tftp_put_begin();
0000d0  ebfffffe          BL       tftp_put_begin
;;;46     
;;;47     	return 0;
0000d4  e3a00000          MOV      r0,#0
0000d8  e8bd4070          POP      {r4-r6,lr}
;;;48     }
0000dc  e12fff1e          BX       lr
;;;49     
                          ENDP

                  tftp_rcv_data PROC
;;;50     int tftp_rcv_data(struct sk_buff *skb)
0000e0  e92d41f0          PUSH     {r4-r8,lr}
;;;51     {
0000e4  e1a05000          MOV      r5,r0
;;;52     	struct tftphdr *tftp_hdr;
;;;53     	int len;
;;;54     
;;;55     	if (client_ip != ip_get_source_ip(skb))
0000e8  e1a00005          MOV      r0,r5
0000ec  ebfffffe          BL       ip_get_source_ip
0000f0  e59f11b0          LDR      r1,|L1.680|
0000f4  e5911000          LDR      r1,[r1,#0]  ; client_ip
0000f8  e1500001          CMP      r0,r1
0000fc  0a000002          BEQ      |L1.268|
;;;56     		return -1;
000100  e3e00000          MVN      r0,#0
                  |L1.260|
000104  e8bd41f0          POP      {r4-r8,lr}
;;;57     	if (client_port != udp_get_source_port(skb))
;;;58     		return -1;
;;;59     
;;;60     	tftp_hdr = (struct tftphdr *)skb->data;
;;;61     	if (client_block == ntohs(tftp_hdr->th_block)) 
;;;62     	{
;;;63     
;;;64     		len = skb->len - sizeof(struct tftphdr);
;;;65     		uart_printf("Copy data!\n");
;;;66     		tftp_put((unsigned char *)tftp_hdr+sizeof(struct tftphdr), len);
;;;67     		uart_printf("Copy data end!\n");
;;;68     
;;;69     		tftp_send_ack(tftp_hdr, client_block);
;;;70     		client_block++;
;;;71     
;;;72     		if (len < 512)		
;;;73     			tftp_put_end();		
;;;74     
;;;75     	} 
;;;76     	else if (client_block > ntohs(tftp_hdr->th_block)) {
;;;77     
;;;78     		tftp_send_ack(tftp_hdr, ntohs(tftp_hdr->th_block));
;;;79     
;;;80     	} else {
;;;81     
;;;82     		tftp_send_ack(tftp_hdr, client_block);
;;;83     	}
;;;84     
;;;85     	return 0;
;;;86     }
000108  e12fff1e          BX       lr
                  |L1.268|
00010c  e1a00005          MOV      r0,r5                 ;57
000110  ebfffffe          BL       udp_get_source_port
000114  e59f1188          LDR      r1,|L1.676|
000118  e1d110b0          LDRH     r1,[r1,#0]            ;57  ; client_port
00011c  e1500001          CMP      r0,r1                 ;57
000120  0a000001          BEQ      |L1.300|
000124  e3e00000          MVN      r0,#0                 ;58
000128  eafffff5          B        |L1.260|
                  |L1.300|
00012c  e59545f0          LDR      r4,[r5,#0x5f0]        ;60
000130  e5d41003          LDRB     r1,[r4,#3]            ;61
000134  e5d42002          LDRB     r2,[r4,#2]            ;61
000138  e1820401          ORR      r0,r2,r1,LSL #8       ;61
00013c  ebfffffe          BL       ntohs
000140  e59f1164          LDR      r1,|L1.684|
000144  e1d110b0          LDRH     r1,[r1,#0]            ;61  ; client_block
000148  e1500001          CMP      r0,r1                 ;61
00014c  1a000016          BNE      |L1.428|
000150  e59505f4          LDR      r0,[r5,#0x5f4]        ;64
000154  e2406004          SUB      r6,r0,#4              ;64
000158  e28f0e15          ADR      r0,|L1.688|
00015c  ebfffffe          BL       uart_printf
000160  e1a01006          MOV      r1,r6                 ;66
000164  e2840004          ADD      r0,r4,#4              ;66
000168  ebfffffe          BL       tftp_put
00016c  e28f0f52          ADR      r0,|L1.700|
000170  ebfffffe          BL       uart_printf
000174  e59f0130          LDR      r0,|L1.684|
000178  e1d010b0          LDRH     r1,[r0,#0]            ;69  ; client_block
00017c  e1a00004          MOV      r0,r4                 ;69
000180  ebfffffe          BL       tftp_send_ack
000184  e59f0120          LDR      r0,|L1.684|
000188  e1d000b0          LDRH     r0,[r0,#0]            ;70  ; client_block
00018c  e2800001          ADD      r0,r0,#1              ;70
000190  e3c00801          BIC      r0,r0,#0x10000        ;70
000194  e59f1110          LDR      r1,|L1.684|
000198  e1c100b0          STRH     r0,[r1,#0]            ;70  ; client_block
00019c  e3560c02          CMP      r6,#0x200             ;72
0001a0  aa000016          BGE      |L1.512|
0001a4  ebfffffe          BL       tftp_put_end
0001a8  ea000014          B        |L1.512|
                  |L1.428|
0001ac  e5d41003          LDRB     r1,[r4,#3]            ;76
0001b0  e5d42002          LDRB     r2,[r4,#2]            ;76
0001b4  e1820401          ORR      r0,r2,r1,LSL #8       ;76
0001b8  ebfffffe          BL       ntohs
0001bc  e59f10e8          LDR      r1,|L1.684|
0001c0  e1d110b0          LDRH     r1,[r1,#0]            ;76  ; client_block
0001c4  e1500001          CMP      r0,r1                 ;76
0001c8  aa000008          BGE      |L1.496|
0001cc  e5d41003          LDRB     r1,[r4,#3]            ;78
0001d0  e5d42002          LDRB     r2,[r4,#2]            ;78
0001d4  e1820401          ORR      r0,r2,r1,LSL #8       ;78
0001d8  ebfffffe          BL       ntohs
0001dc  e1a07000          MOV      r7,r0                 ;78
0001e0  e1a01007          MOV      r1,r7                 ;78
0001e4  e1a00004          MOV      r0,r4                 ;78
0001e8  ebfffffe          BL       tftp_send_ack
0001ec  ea000003          B        |L1.512|
                  |L1.496|
0001f0  e59f00b4          LDR      r0,|L1.684|
0001f4  e1d010b0          LDRH     r1,[r0,#0]            ;82  ; client_block
0001f8  e1a00004          MOV      r0,r4                 ;82
0001fc  ebfffffe          BL       tftp_send_ack
                  |L1.512|
000200  e3a00000          MOV      r0,#0                 ;85
000204  eaffffbe          B        |L1.260|
;;;87     
                          ENDP

                  tftp_rcv_packet PROC
;;;88     int tftp_rcv_packet(struct sk_buff *skb)
000208  e92d4070          PUSH     {r4-r6,lr}
;;;89     {
00020c  e1a04000          MOV      r4,r0
;;;90     	struct tftphdr *tftp_hdr;
;;;91     	
;;;92     	tftp_hdr = (struct tftphdr *)skb->data;
000210  e59455f0          LDR      r5,[r4,#0x5f0]
;;;93     
;;;94     	switch (ntohs(tftp_hdr->th_opcode)) {
000214  e5d51001          LDRB     r1,[r5,#1]
000218  e5d52000          LDRB     r2,[r5,#0]
00021c  e1821401          ORR      r1,r2,r1,LSL #8
000220  e1a00801          LSL      r0,r1,#16
000224  e1a00820          LSR      r0,r0,#16
000228  ebfffffe          BL       ntohs
00022c  e3500006          CMP      r0,#6
000230  308ff100          ADDCC    pc,pc,r0,LSL #2
000234  ea000013          B        |L1.648|
000238  ea000012          B        |L1.648|
00023c  ea000003          B        |L1.592|
000240  ea000004          B        |L1.600|
000244  ea000007          B        |L1.616|
000248  ea00000a          B        |L1.632|
00024c  ea00000b          B        |L1.640|
                  |L1.592|
;;;95     
;;;96     	case RRQ:
000250  e1a00000          MOV      r0,r0
;;;97     
;;;98     		break;
000254  ea00000d          B        |L1.656|
                  |L1.600|
;;;99     	case WRQ:
000258  e1a00000          MOV      r0,r0
;;;100    
;;;101    		tftp_rcv_wrq(skb);
00025c  e1a00004          MOV      r0,r4
000260  ebfffffe          BL       tftp_rcv_wrq
;;;102    		break;
000264  ea000009          B        |L1.656|
                  |L1.616|
;;;103    	case DATA:
000268  e1a00000          MOV      r0,r0
;;;104    
;;;105    		tftp_rcv_data(skb);
00026c  e1a00004          MOV      r0,r4
000270  ebfffffe          BL       tftp_rcv_data
;;;106    		break;
000274  ea000005          B        |L1.656|
                  |L1.632|
;;;107    	case ACK:
000278  e1a00000          MOV      r0,r0
;;;108    
;;;109    		break;
00027c  ea000003          B        |L1.656|
                  |L1.640|
;;;110    	case ERROR:
000280  e1a00000          MOV      r0,r0
;;;111    
;;;112    		break;
000284  ea000001          B        |L1.656|
                  |L1.648|
;;;113    	default:
000288  e1a00000          MOV      r0,r0
;;;114    		break;
00028c  e1a00000          MOV      r0,r0
                  |L1.656|
000290  e1a00000          MOV      r0,r0                 ;98
;;;115    	}
;;;116    
;;;117    	return 0;
000294  e3a00000          MOV      r0,#0
000298  e8bd4070          POP      {r4-r6,lr}
;;;118    }
00029c  e12fff1e          BX       lr
;;;119    
                          ENDP

                  |L1.672|
                          DCD      0x000005ea
                  |L1.676|
                          DCD      client_port
                  |L1.680|
                          DCD      client_ip
                  |L1.684|
                          DCD      client_block
                  |L1.688|
0002b0  436f7079          DCB      "Copy data!\n",0
0002b4  20646174
0002b8  61210a00
                  |L1.700|
0002bc  436f7079          DCB      "Copy data end!\n",0
0002c0  20646174
0002c4  6120656e
0002c8  64210a00

                          AREA ||.data||, DATA, ALIGN=2

                  client_ip
                          DCD      0x00000000
                  client_port
000004  0000              DCB      0x00,0x00
                  client_block
000006  0000              DCB      0x00,0x00
