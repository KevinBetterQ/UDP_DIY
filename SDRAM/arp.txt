; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\SDRAM\arp.o --asm_dir=.\SDRAM\ --list_dir=.\SDRAM\ --depend=.\SDRAM\arp.d --cpu=ARM920T --apcs=interwork -O0 -I..\Common\Inc -I.\INC -I.\INC\tftp -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Samsung --omf_browse=.\SDRAM\arp.crf Source\tftp\arp.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  arp_init PROC
;;;17     
;;;18     int arp_init(void)
000000  e92d4010          PUSH     {r4,lr}
;;;19     {
;;;20     	memset(&arp_entrys, 0, sizeof(arp_entry));
000004  e3a0200c          MOV      r2,#0xc
000008  e3a01000          MOV      r1,#0
00000c  e59f0340          LDR      r0,|L1.852|
000010  ebfffffe          BL       memset
;;;21     	memset(arp_cache, 0, sizeof(arp_entry) * ARP_CACHE_SIZE);
000014  e3a020c0          MOV      r2,#0xc0
000018  e3a01000          MOV      r1,#0
00001c  e59f0334          LDR      r0,|L1.856|
000020  ebfffffe          BL       memset
;;;22     
;;;23     	return 0;
000024  e3a00000          MOV      r0,#0
000028  e8bd4010          POP      {r4,lr}
;;;24     }
00002c  e12fff1e          BX       lr
;;;25     
                          ENDP

                  arp_add_entry PROC
;;;26     int arp_add_entry(unsigned char *ha, unsigned long ip)
000030  e92d4070          PUSH     {r4-r6,lr}
;;;27     {
000034  e1a04000          MOV      r4,r0
000038  e1a05001          MOV      r5,r1
;;;28     	memcpy(arp_entrys.ar_ha, ha, ETH_ALEN);
00003c  e3a02006          MOV      r2,#6
000040  e1a01004          MOV      r1,r4
000044  e59f0308          LDR      r0,|L1.852|
000048  ebfffffe          BL       memcpy
;;;29     	arp_entrys.ar_ip = htonl(ip);
00004c  e1a00005          MOV      r0,r5
000050  ebfffffe          BL       htonl
000054  e59f12f8          LDR      r1,|L1.852|
000058  e5810008          STR      r0,[r1,#8]  ; arp_entrys
;;;30     
;;;31     	return 0;
00005c  e3a00000          MOV      r0,#0
000060  e8bd4070          POP      {r4-r6,lr}
;;;32     }
000064  e12fff1e          BX       lr
;;;33     
                          ENDP

                  arp_add_cache PROC
;;;34     int arp_add_cache(unsigned char *ha, unsigned long ip)
000068  e92d4070          PUSH     {r4-r6,lr}
;;;35     {
00006c  e1a06000          MOV      r6,r0
000070  e1a05001          MOV      r5,r1
;;;36     	int i;
;;;37     
;;;38     	for (i = 0; i < ARP_CACHE_SIZE; i++) {
000074  e3a04000          MOV      r4,#0
000078  ea000007          B        |L1.156|
                  |L1.124|
;;;39     		if (ip == arp_cache[i].ar_ip)
00007c  e0840084          ADD      r0,r4,r4,LSL #1
000080  e59f12d0          LDR      r1,|L1.856|
000084  e0810100          ADD      r0,r1,r0,LSL #2
000088  e5900008          LDR      r0,[r0,#8]
00008c  e1500005          CMP      r0,r5
000090  1a000000          BNE      |L1.152|
;;;40     			break;
000094  ea000002          B        |L1.164|
                  |L1.152|
000098  e2844001          ADD      r4,r4,#1              ;38
                  |L1.156|
00009c  e3540010          CMP      r4,#0x10              ;38
0000a0  bafffff5          BLT      |L1.124|
                  |L1.164|
0000a4  e1a00000          MOV      r0,r0
;;;41     	}
;;;42     
;;;43     	if (i == ARP_CACHE_SIZE) {
0000a8  e3540010          CMP      r4,#0x10
0000ac  1a00000b          BNE      |L1.224|
;;;44     		i = arp_chche_cur;
0000b0  e59f02a4          LDR      r0,|L1.860|
0000b4  e5904000          LDR      r4,[r0,#0]  ; arp_chche_cur
;;;45     //		arp_chche_cur = (arp_chche_cur + 1) % ARP_CACHE_SIZE;
;;;46     		arp_chche_cur++;
0000b8  e5900000          LDR      r0,[r0,#0]  ; arp_chche_cur
0000bc  e2800001          ADD      r0,r0,#1
0000c0  e59f1294          LDR      r1,|L1.860|
0000c4  e5810000          STR      r0,[r1,#0]  ; arp_chche_cur
;;;47     		if(arp_chche_cur>=ARP_CACHE_SIZE)
0000c8  e2810000          ADD      r0,r1,#0
0000cc  e5900000          LDR      r0,[r0,#0]  ; arp_chche_cur
0000d0  e3500010          CMP      r0,#0x10
0000d4  ba000001          BLT      |L1.224|
;;;48     			arp_chche_cur = 0;
0000d8  e3a00000          MOV      r0,#0
0000dc  e5810000          STR      r0,[r1,#0]  ; arp_chche_cur
                  |L1.224|
;;;49     	}
;;;50     
;;;51     	memcpy(arp_cache[i].ar_ha, ha, ETH_ALEN);
0000e0  e0841084          ADD      r1,r4,r4,LSL #1
0000e4  e59f226c          LDR      r2,|L1.856|
0000e8  e0820101          ADD      r0,r2,r1,LSL #2
0000ec  e3a02006          MOV      r2,#6
0000f0  e1a01006          MOV      r1,r6
0000f4  ebfffffe          BL       memcpy
;;;52     	arp_cache[i].ar_ip = ip;
0000f8  e0840084          ADD      r0,r4,r4,LSL #1
0000fc  e59f1254          LDR      r1,|L1.856|
000100  e0810100          ADD      r0,r1,r0,LSL #2
000104  e5805008          STR      r5,[r0,#8]
;;;53     
;;;54     	return 0;
000108  e3a00000          MOV      r0,#0
00010c  e8bd4070          POP      {r4-r6,lr}
;;;55     }
000110  e12fff1e          BX       lr
;;;56     
                          ENDP

                  arp_send_req PROC
;;;57     int arp_send_req(unsigned long ip)
000114  e92d41fc          PUSH     {r2-r8,lr}
;;;58     {
000118  e1a05000          MOV      r5,r0
;;;59     	struct sk_buff *skb;
;;;60     	struct arphdr *arp_req;	
;;;61     	unsigned char broadcast[ETH_ALEN] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff};	
00011c  e28f1f8f          ADR      r1,|L1.864|
000120  e8910003          LDM      r1,{r0,r1}
000124  e88d0003          STM      sp,{r0,r1}
;;;62     
;;;63     	skb = alloc_skb(ETH_HLEN + sizeof(struct arphdr));
000128  e3a0002a          MOV      r0,#0x2a
00012c  ebfffffe          BL       alloc_skb
000130  e1a06000          MOV      r6,r0
;;;64     	eth_skb_reserve(skb);
000134  e1a00006          MOV      r0,r6
000138  ebfffffe          BL       eth_skb_reserve
;;;65     	arp_req = (struct arphdr *)skb_put(skb, sizeof(struct arphdr));
00013c  e3a0101c          MOV      r1,#0x1c
000140  e1a00006          MOV      r0,r6
000144  ebfffffe          BL       skb_put
000148  e1a04000          MOV      r4,r0
;;;66     
;;;67     	arp_req->ar_hrd = htons(ARPHRD_ETHER);
00014c  e3a00001          MOV      r0,#1
000150  ebfffffe          BL       htons
000154  e5c40000          STRB     r0,[r4,#0]
000158  e1a00420          LSR      r0,r0,#8
00015c  e5c40001          STRB     r0,[r4,#1]
;;;68     	arp_req->ar_pro = htons(ETH_P_IP);
000160  e3a00b02          MOV      r0,#0x800
000164  ebfffffe          BL       htons
000168  e5c40002          STRB     r0,[r4,#2]
00016c  e1a00420          LSR      r0,r0,#8
000170  e5c40003          STRB     r0,[r4,#3]
;;;69     	arp_req->ar_hln = 0x06;
000174  e3a00006          MOV      r0,#6
000178  e5c40004          STRB     r0,[r4,#4]
;;;70     	arp_req->ar_pln = 0x04;
00017c  e3a00004          MOV      r0,#4
000180  e5c40005          STRB     r0,[r4,#5]
;;;71     	arp_req->ar_op = htons(ARPOP_REQUEST);	
000184  e3a00001          MOV      r0,#1
000188  ebfffffe          BL       htons
00018c  e5c40006          STRB     r0,[r4,#6]
000190  e1a00420          LSR      r0,r0,#8
000194  e5c40007          STRB     r0,[r4,#7]
;;;72     	memcpy((unsigned char *)arp_req->ar_sha, arp_entrys.ar_ha, ETH_ALEN);
000198  e3a02006          MOV      r2,#6
00019c  e59f11b0          LDR      r1,|L1.852|
0001a0  e2840008          ADD      r0,r4,#8
0001a4  ebfffffe          BL       memcpy
;;;73     	arp_req->ar_sip = arp_entrys.ar_ip;	
0001a8  e59f11a4          LDR      r1,|L1.852|
0001ac  e5910008          LDR      r0,[r1,#8]  ; arp_entrys
0001b0  e284100e          ADD      r1,r4,#0xe
0001b4  ebfffffe          BL       __aeabi_uwrite4
;;;74     	memset((unsigned char *)arp_req->ar_tha, 0x00, ETH_ALEN);
0001b8  e3a02006          MOV      r2,#6
0001bc  e3a01000          MOV      r1,#0
0001c0  e2840012          ADD      r0,r4,#0x12
0001c4  ebfffffe          BL       memset
;;;75     	arp_req->ar_tip = htonl(ip);
0001c8  e1a00005          MOV      r0,r5
0001cc  ebfffffe          BL       htonl
0001d0  e1a07000          MOV      r7,r0
0001d4  e2841018          ADD      r1,r4,#0x18
0001d8  ebfffffe          BL       __aeabi_uwrite4
;;;76     
;;;77     	eth_send(skb, broadcast, ETH_P_ARP);
0001dc  e59f2184          LDR      r2,|L1.872|
0001e0  e1a0100d          MOV      r1,sp
0001e4  e1a00006          MOV      r0,r6
0001e8  ebfffffe          BL       eth_send
;;;78     
;;;79     	return 0;
0001ec  e3a00000          MOV      r0,#0
0001f0  e8bd41fc          POP      {r2-r8,lr}
;;;80     }
0001f4  e12fff1e          BX       lr
;;;81     
                          ENDP

                  arp_send_rsp PROC
;;;82     int arp_send_rsp(struct arphdr *arp_hdr)
0001f8  e92d41f0          PUSH     {r4-r8,lr}
;;;83     {
0001fc  e1a05000          MOV      r5,r0
;;;84     	struct sk_buff *skb;
;;;85     	struct arphdr *arp_rsp;	
;;;86     	
;;;87     	skb = alloc_skb(ETH_HLEN + sizeof(struct arphdr));
000200  e3a0002a          MOV      r0,#0x2a
000204  ebfffffe          BL       alloc_skb
000208  e1a06000          MOV      r6,r0
;;;88     	eth_skb_reserve(skb);
00020c  e1a00006          MOV      r0,r6
000210  ebfffffe          BL       eth_skb_reserve
;;;89     	arp_rsp = (struct arphdr *)skb_put(skb, sizeof(struct arphdr));
000214  e3a0101c          MOV      r1,#0x1c
000218  e1a00006          MOV      r0,r6
00021c  ebfffffe          BL       skb_put
000220  e1a04000          MOV      r4,r0
;;;90     
;;;91     	arp_rsp->ar_hrd = htons(ARPHRD_ETHER);
000224  e3a00001          MOV      r0,#1
000228  ebfffffe          BL       htons
00022c  e5c40000          STRB     r0,[r4,#0]
000230  e1a00420          LSR      r0,r0,#8
000234  e5c40001          STRB     r0,[r4,#1]
;;;92     	arp_rsp->ar_pro = htons(ETH_P_IP);
000238  e3a00b02          MOV      r0,#0x800
00023c  ebfffffe          BL       htons
000240  e5c40002          STRB     r0,[r4,#2]
000244  e1a00420          LSR      r0,r0,#8
000248  e5c40003          STRB     r0,[r4,#3]
;;;93     	arp_rsp->ar_hln = 0x06;
00024c  e3a00006          MOV      r0,#6
000250  e5c40004          STRB     r0,[r4,#4]
;;;94     	arp_rsp->ar_pln = 0x04;
000254  e3a00004          MOV      r0,#4
000258  e5c40005          STRB     r0,[r4,#5]
;;;95     	arp_rsp->ar_op = htons(ARPOP_REPLY);
00025c  e3a00002          MOV      r0,#2
000260  ebfffffe          BL       htons
000264  e5c40006          STRB     r0,[r4,#6]
000268  e1a00420          LSR      r0,r0,#8
00026c  e5c40007          STRB     r0,[r4,#7]
;;;96     	memcpy((unsigned char *)arp_rsp->ar_sha, arp_entrys.ar_ha, ETH_ALEN);
000270  e3a02006          MOV      r2,#6
000274  e59f10d8          LDR      r1,|L1.852|
000278  e2840008          ADD      r0,r4,#8
00027c  ebfffffe          BL       memcpy
;;;97     	arp_rsp->ar_sip = arp_hdr->ar_tip;
000280  e2850018          ADD      r0,r5,#0x18
000284  ebfffffe          BL       __aeabi_uread4
000288  e1a07000          MOV      r7,r0
00028c  e284100e          ADD      r1,r4,#0xe
000290  ebfffffe          BL       __aeabi_uwrite4
;;;98     	memcpy((unsigned char *)arp_rsp->ar_tha, (unsigned char *)arp_hdr->ar_sha, ETH_ALEN);
000294  e3a02006          MOV      r2,#6
000298  e2851008          ADD      r1,r5,#8
00029c  e2840012          ADD      r0,r4,#0x12
0002a0  ebfffffe          BL       memcpy
;;;99     	arp_rsp->ar_tip = arp_hdr->ar_sip;
0002a4  e285000e          ADD      r0,r5,#0xe
0002a8  ebfffffe          BL       __aeabi_uread4
0002ac  e1a07000          MOV      r7,r0
0002b0  e2841018          ADD      r1,r4,#0x18
0002b4  ebfffffe          BL       __aeabi_uwrite4
;;;100    
;;;101    	eth_send(skb, arp_hdr->ar_sha, ETH_P_ARP);
0002b8  e59f20a8          LDR      r2,|L1.872|
0002bc  e2851008          ADD      r1,r5,#8
0002c0  e1a00006          MOV      r0,r6
0002c4  ebfffffe          BL       eth_send
;;;102    
;;;103    	return 0;
0002c8  e3a00000          MOV      r0,#0
0002cc  e8bd41f0          POP      {r4-r8,lr}
;;;104    }
0002d0  e12fff1e          BX       lr
;;;105    
                          ENDP

                  arp_get_eth_addr PROC
;;;106    int arp_get_eth_addr(unsigned long ip, unsigned char *ha)
0002d4  e92d4070          PUSH     {r4-r6,lr}
;;;107    {
0002d8  e1a06000          MOV      r6,r0
0002dc  e1a05001          MOV      r5,r1
;;;108    	int i;
;;;109    
;;;110    	for (i = 0; i < ARP_CACHE_SIZE; i++) {
0002e0  e3a04000          MOV      r4,#0
0002e4  ea00000e          B        |L1.804|
                  |L1.744|
;;;111    		if (htonl(ip) == arp_cache[i].ar_ip) {
0002e8  e1a00006          MOV      r0,r6
0002ec  ebfffffe          BL       htonl
0002f0  e0841084          ADD      r1,r4,r4,LSL #1
0002f4  e59f205c          LDR      r2,|L1.856|
0002f8  e0821101          ADD      r1,r2,r1,LSL #2
0002fc  e5911008          LDR      r1,[r1,#8]
000300  e1500001          CMP      r0,r1
000304  1a000005          BNE      |L1.800|
;;;112    			memcpy(ha, arp_cache[i].ar_ha, ETH_ALEN);
000308  e0840084          ADD      r0,r4,r4,LSL #1
00030c  e0821100          ADD      r1,r2,r0,LSL #2
000310  e3a02006          MOV      r2,#6
000314  e1a00005          MOV      r0,r5
000318  ebfffffe          BL       memcpy
;;;113    			break;
00031c  ea000002          B        |L1.812|
                  |L1.800|
000320  e2844001          ADD      r4,r4,#1              ;110
                  |L1.804|
000324  e3540010          CMP      r4,#0x10              ;110
000328  baffffee          BLT      |L1.744|
                  |L1.812|
00032c  e1a00000          MOV      r0,r0
;;;114    		}
;;;115    	}
;;;116    
;;;117    	if (i == ARP_CACHE_SIZE) {
000330  e3540010          CMP      r4,#0x10
000334  1a000004          BNE      |L1.844|
;;;118    		arp_send_req(ip);
000338  e1a00006          MOV      r0,r6
00033c  ebfffffe          BL       arp_send_req
;;;119    		return -1;
000340  e3e00000          MVN      r0,#0
                  |L1.836|
000344  e8bd4070          POP      {r4-r6,lr}
;;;120    	}
;;;121    
;;;122    	return 0;
;;;123    }
000348  e12fff1e          BX       lr
                  |L1.844|
00034c  e3a00000          MOV      r0,#0                 ;122
000350  eafffffb          B        |L1.836|
                  |L1.852|
                          DCD      arp_entrys
                  |L1.856|
                          DCD      arp_cache
                  |L1.860|
                          DCD      arp_chche_cur
                  |L1.864|
000360  ffffffff          DCB      255,255,255,255,255,255,0
000364  ffff00  
000367  00                DCB      0
                  |L1.872|
                          DCD      0x00000806
                          ENDP

                  arp_rcv_packet PROC
;;;124    
;;;125    int arp_rcv_packet(struct sk_buff *skb)
00036c  e92d4070          PUSH     {r4-r6,lr}
;;;126    {
000370  e1a05000          MOV      r5,r0
;;;127    	struct arphdr *arp_hdr = (struct arphdr *)(skb->data);
000374  e59545f0          LDR      r4,[r5,#0x5f0]
;;;128    
;;;129    	if (arp_hdr->ar_tip != arp_entrys.ar_ip)
000378  e2840018          ADD      r0,r4,#0x18
00037c  ebfffffe          BL       __aeabi_uread4
000380  e51f1034          LDR      r1,|L1.852|
000384  e5911008          LDR      r1,[r1,#8]  ; arp_entrys
000388  e1500001          CMP      r0,r1
00038c  0a000002          BEQ      |L1.924|
;;;130    	{
;;;131    		return 0;
000390  e3a00000          MOV      r0,#0
                  |L1.916|
000394  e8bd4070          POP      {r4-r6,lr}
;;;132    	}
;;;133    	if (arp_hdr->ar_op == htons(ARPOP_REQUEST))
;;;134    	{
;;;135    		arp_send_rsp(arp_hdr);
;;;136    	}
;;;137    	arp_add_cache(arp_hdr->ar_sha, arp_hdr->ar_sip);
;;;138    
;;;139    	return 1;
;;;140    }
000398  e12fff1e          BX       lr
                  |L1.924|
00039c  e3a00001          MOV      r0,#1                 ;133
0003a0  ebfffffe          BL       htons
0003a4  e5d41007          LDRB     r1,[r4,#7]            ;133
0003a8  e5d42006          LDRB     r2,[r4,#6]            ;133
0003ac  e1821401          ORR      r1,r2,r1,LSL #8       ;133
0003b0  e1500001          CMP      r0,r1                 ;133
0003b4  1a000001          BNE      |L1.960|
0003b8  e1a00004          MOV      r0,r4                 ;135
0003bc  ebfffffe          BL       arp_send_rsp
                  |L1.960|
0003c0  e284000e          ADD      r0,r4,#0xe            ;137
0003c4  ebfffffe          BL       __aeabi_uread4
0003c8  e1a06000          MOV      r6,r0                 ;137
0003cc  e1a01006          MOV      r1,r6                 ;137
0003d0  e2840008          ADD      r0,r4,#8              ;137
0003d4  ebfffffe          BL       arp_add_cache
0003d8  e3a00001          MOV      r0,#1                 ;139
0003dc  eaffffec          B        |L1.916|
;;;141    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  arp_entrys
                          %        12
                  arp_cache
                          %        192

                          AREA ||.data||, DATA, ALIGN=2

                  arp_chche_cur
                          DCD      0x00000000
